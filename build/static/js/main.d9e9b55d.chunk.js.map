{"version":3,"sources":["context/AuthContext.jsx","components/NavBar.jsx","hooks/http.hook.jsx","components/LinksList.jsx","pages/LinkPage.jsx","pages/CreatePage.jsx","components/loader.jsx","components/LinkCard.jsx","pages/DetailPage.jsx","pages/AuthPage.jsx","hooks/message.hook.jsx","App.js","hooks/auth.hook.jsx","pages/routes.jsx","serviceWorker.js","index.js"],"names":["noop","AuthContext","createContext","token","userId","login","logout","isAuth","NavBar","props","auth","useContext","history","useHistory","className","style","padding","href","id","to","onClick","e","preventDefault","push","useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","res","json","data","ok","Error","message","clearError","LinksList","links","length","map","link","index","key","_id","from","LinkPage","setLinks","fetchLinks","Authorization","fetched","useEffect","CreatePage","setLink","pressHandler","event","paddingTop","htmlFor","type","placeholder","value","name","onChange","target","onKeyPress","Loader","display","justifyContent","LinkCard","rel","clicks","Date","date","toLocaleDateString","DetailPage","linkId","useParams","getLink","AuthPage","text","window","M","toast","html","form","setForm","updateTextFields","handleChange","registerHandler","loginHandler","email","password","disabled","App","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.d9e9b55d.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nfunction noop() {}\n\nexport const AuthContext = createContext({\n  token: null,\n  userId: null,\n  login: noop,\n  logout: noop,\n  isAuth: false,\n})","import React, { useContext } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { AuthContext } from \"../context/AuthContext\";\n\nconst NavBar = (props) => {\n  const auth = useContext(AuthContext)\n  const history = useHistory()\n\n  const logoutHandler = e => {\n    e.preventDefault()\n    auth.logout()\n    history.push('/')\n  }\n\n  return(\n  <nav>\n    <div className=\"nav-wrapper darken-1\" style={{ padding: '0 2rem' }}>\n      <a href=\"/\" className=\"brand-logo\">LinkStack</a>\n      <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n        <li><NavLink to=\"/create\">Create</NavLink></li>\n        <li><NavLink to=\"/links\">Links</NavLink></li>\n        <li><a href=\"/\" onClick={logoutHandler}>Log out</a></li>\n      </ul>\n    </div>\n  </nav>\n)};\n\nexport default NavBar;","import { useCallback, useState } from 'react'\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false)\n  const [error, setError]= useState(null)\n\n  const request = useCallback(async(url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true)\n    try {\n      if (body) {\n        body = JSON.stringify(body)\n        headers['Content-Type'] = 'application/json'\n      }\n      const res = await fetch(url, { method, body, headers })\n      const data = await res.json()\n\n      if (!res.ok) throw new Error(data.message || 'Something went wrong')\n\n      setLoading(false)\n\n      return data\n    } catch (e) {\n      setLoading(false)\n      setError(e.message)\n      throw e\n    }\n  }, [])\n\n  const clearError = useCallback(() => setError(null), [])\n\n  return { loading, request, error, clearError }\n}","import React from 'react';\nimport { Link } from 'react-router-dom'\n\nconst LinksList = ({ links }) => {\n  if (!links.length) {\n    return <p className=\"center\">Links is not exist yet</p>\n  }\n\n  return(\n  <table>\n    <thead>\n    <tr>\n      <th>#</th>\n      <th>Original</th>\n      <th>Shorten</th>\n      <th>Open</th>\n    </tr>\n    </thead>\n\n    <tbody>\n    { links.map((link, index) => (\n      <tr key={link._id}>\n        <td>{index + 1}</td>\n        <td>{link.from}</td>\n        <td>{link.to}</td>\n        <td>\n          <Link to={`/detail/${link._id}`}>Open</Link>\n        </td>\n      </tr>\n    ))}\n    </tbody>\n  </table>\n\n)};\n\nexport default LinksList;","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport {useHttp} from \"../hooks/http.hook\";\nimport {AuthContext} from \"../context/AuthContext\";\nimport LinksList from \"../components/LinksList\";\n\nconst LinkPage = (props) => {\n  const [links, setLinks] = useState([])\n  const { loading, request } = useHttp()\n  const { token } = useContext(AuthContext)\n\n  const fetchLinks = useCallback(async () => {\n    try {\n      const fetched = await request('/api/link', 'GET', null, {\n        Authorization: `Bearer ${token}`,\n      })\n      setLinks(fetched)\n    } catch (e) {\n\n    }\n  }, [token, request])\n\n  useEffect(() => {\n    fetchLinks()\n  }, [fetchLinks])\n\n  return(\n  <div>\n    {!loading && <LinksList links={links} />}\n  </div>\n)};\n\nexport default LinkPage;","import React, {useContext, useState} from 'react';\nimport {useHttp} from \"../hooks/http.hook\";\nimport {AuthContext} from \"../context/AuthContext\";\nimport { useHistory } from 'react-router-dom';\n\nconst CreatePage = (props) => {\n  const history = useHistory()\n  const auth = useContext(AuthContext)\n  const { request } = useHttp()\n  const [link, setLink] = useState('')\n\n  const pressHandler = async event => {\n    if (event.key === 'Enter') {\n      try {\n        const data = await request('/api/link/generate', 'POST', { from: link }, {\n          Authorization: `Bearer ${auth.token}`\n        })\n        history.push(`/detail/${data.link._id}`)\n      } catch (e) {\n\n      }\n    }\n  }\n\n  return(\n  <div className=\"row\">\n    <div className=\"col s8 offset-s2\" style={{ paddingTop: '2rem' }}>\n      <div className=\"email\">\n        <lable htmlFor=\"link\">Email:</lable>\n        <input\n          type=\"text\"\n          placeholder=\"Input your link...\"\n          value={link}\n          name=\"link\"\n          onChange={e => setLink(e.target.value)}\n          onKeyPress={pressHandler}\n        />\n      </div>\n    </div>\n  </div>\n)};\n\nexport default CreatePage;","import React from 'react';\n\nconst Loader = (props) => (\n  <div style={{ display: 'flex', justifyContent: 'center', paddingTop: '2rem'}}>\n    <div className=\"preloader-wrapper small active\">\n      <div className=\"spinner-layer spinner-green-only\">\n        <div className=\"circle-clipper left\">\n          <div className=\"circle\"></div>\n        </div>\n        <div className=\"gap-patch\">\n          <div className=\"circle\"></div>\n        </div>\n        <div className=\"circle-clipper right\">\n          <div className=\"circle\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Loader; ","import React from 'react';\n\nconst LinkCard = ({ link }) => (\n  <>\n    <h2>Link</h2>\n    <p>Shorten link: <a href={link.to} target=\"_blank\" rel=\"noopener noreferrer\">{link.to}</a></p>\n    <p>From: <a href={link.from} target=\"_blank\" rel=\"noopener noreferrer\">{link.from}</a></p>\n    <p>Count clicks: <strong>{link.clicks}</strong></p>\n    <p>Date: <strong>{new Date(link.date).toLocaleDateString()}</strong></p>\n  </>\n);\n\nexport default LinkCard;","import React, {useCallback, useContext, useEffect, useState} from 'react';\nimport { useParams } from 'react-router-dom';\nimport {useHttp} from \"../hooks/http.hook\";\nimport {AuthContext} from \"../context/AuthContext\";\nimport Loader from \"../components/loader\";\nimport LinkCard from \"../components/LinkCard\";\n\nconst DetailPage = (props) => {\n  const { token } = useContext(AuthContext)\n  const { request, loading } = useHttp()\n  const [link, setLink] = useState(null)\n  const linkId = useParams().id\n\n  const getLink = useCallback(async() => {\n    try {\n      const fetched = await request(`/api/link/${linkId}`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      })\n      setLink(fetched)\n    } catch (e) {\n    }\n  }, [token, linkId, request])\n\n  useEffect(() => {\n    getLink()\n  }, [getLink])\n\n  if (loading) {\n    return <Loader/>\n  }\n\n  return(\n  <>\n    { !loading && link && <LinkCard link={link} />}\n  </>\n)};\n\nexport default DetailPage;","import React, {useContext, useEffect, useState} from 'react';\nimport { useHttp } from '../hooks/http.hook';\nimport { useMessage } from \"../hooks/message.hook\";\nimport { AuthContext } from \"../context/AuthContext\";\n\nconst AuthPage = (props) => {\n  const auth = useContext(AuthContext)\n  const { loading, error, request, clearError } = useHttp()\n  const message = useMessage()\n  const [form, setForm] = useState({});\n\n  useEffect(() => {\n    message(error)\n    clearError()\n  }, [error, message, clearError])\n\n  useEffect(() => {\n    window.M.updateTextFields()\n  }, [])\n\n  const handleChange = e => setForm({ ...form, [e.target.name] : e.target.value });\n\n  const registerHandler = async() => {\n    try {\n      const data = await request('/api/auth/register', 'POST', { ...form })\n      message(data.message)\n    } catch (e) {\n\n    }\n  }\n\n  const loginHandler = async() => {\n    try {\n      const data = await request('/api/auth/login', 'POST', { ...form })\n      auth.login(data.token, data.userId)\n      message(data.message)\n    } catch (e) {\n\n    }\n  }\n\n  return(\n  <div className=\"row\">\n    <div className=\"col s6 offset-s3\">\n      <h1>LinkStack</h1>\n      <div className=\"row\">\n        <div className=\"col s12 m6\">\n          <div className=\"card blue-grey darken-1\">\n            <div className=\"card-content white-text\">\n              <span className=\"card-title\">Registration</span>\n              <div className=\"email\">\n                <span>Email:</span>\n                <input\n                  type=\"text\"\n                  placeholder=\"Input email\"\n                  name=\"email\"\n                  value={form.email}\n                  onChange={handleChange}\n                />\n              </div>\n              <div className=\"password\">\n                <span>Password:</span>\n                <input\n                  placeholder=\"Input password\"\n                  name=\"password\"\n                  value={form.password}\n                  onChange={handleChange}\n                  type=\"password\"\n                />\n              </div>\n            </div>\n            <div className=\"card-action\">\n              <button\n                className=\"btn yellow darken-4\"\n                disabled={loading}\n                onClick={loginHandler}\n              >\n                Sign in\n              </button>\n              <button\n                className=\"btn grey lighten-1 black-text\"\n                onClick={registerHandler}\n                disabled={loading}\n              >\n                Register\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n)};\n\nexport default AuthPage;","import { useCallback } from 'react';\n\nexport const useMessage = () => {\n  return useCallback(text => {\n    if (window.M && text) {\n      window.M.toast({ html: text })\n    }\n  }, [])\n}","import React from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport NavBar from './components/NavBar';\nimport { AuthContext } from './context/AuthContext'\nimport { useRoutes } from './pages/routes'\nimport { useAuth } from './hooks/auth.hook'\n\nimport Loader from \"./components/loader\";\nimport 'materialize-css'\n\n\nfunction App() {\n  const { token, login, logout, userId, ready } = useAuth()\n  const isAuth = !!token\n  const routes = useRoutes(isAuth)\n\n  if(!ready) {\n    return <Loader />\n  }\n\n  return (\n    <AuthContext.Provider value={{ token, login, logout, userId, isAuth }}>\n      <Router>\n        {isAuth && <NavBar />}\n        <div className=\"container\">\n          {routes}\n        </div>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import { useState, useCallback, useEffect } from 'react'\n\nconst storageName = 'userData'\n\nexport const useAuth = () => {\n  const [token, setToken] = useState(null)\n  const [ready, setReady] = useState(false)\n  const [userId, setUserId] = useState(null)\n\n  const login = useCallback((jwtToken, id) => {\n    setToken(jwtToken)\n    setUserId(id)\n\n    localStorage.setItem(storageName, JSON.stringify({ userId: id, token: jwtToken }))\n  }, [])\n\n  const logout = useCallback(() => {\n    setToken(null)\n    setUserId(null)\n\n    localStorage.removeItem(storageName)\n  }, [])\n\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem(storageName))\n\n    if (data && data.token) {\n      login(data.token, data.userId)\n    }\n    setReady(true)\n  }, [login])\n\n  return { login, logout, token, userId, ready }\n}","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport LinkPage from './LinkPage'\nimport CreatePage from './CreatePage';\nimport DetailPage from './DetailPage';\nimport AuthPage from './AuthPage';\n\nexport const useRoutes = isAuth => {\n  if (isAuth) {\n    return (\n      <Switch>\n        <Route path=\"/links\">\n          <LinkPage />\n        </Route>\n        <Route path=\"/create\">\n          <CreatePage />\n        </Route>\n        <Route path=\"/detail/:id\">\n          <DetailPage />\n        </Route>\n        <Redirect to=\"/create\" />\n      </Switch>\n    )\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact>\n        <AuthPage />\n      </Route>\n      <Redirect to=\"/\" />\n    </Switch>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}